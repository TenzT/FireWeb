<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fireengineering.management.mapper.MaintenanceMapper" >
  <resultMap id="BaseResultMap" type="com.fireengineering.management.po.Maintenance" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="deployment_id" property="deploymentId" jdbcType="VARCHAR" />
    <result column="record" property="record" jdbcType="VARCHAR" />
    <result column="date" property="date" jdbcType="DATE" />
    <result column="note" property="note" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="UsrDepMap" type="com.fireengineering.management.po.Maintenance" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="deployment_id" property="deploymentId" jdbcType="INTEGER" />
    <result column="record" property="record" jdbcType="INTEGER" />
    <result column="date" property="date" jdbcType="INTEGER" />
    <result column="note" property="note" jdbcType="VARCHAR" />
    <association property="user" javaType="com.fireengineering.management.po.User">
      <id column="user_id" property="id"></id>
      <result column="uname" property="name"></result>
    </association>
    <association property="deployment" javaType="com.fireengineering.management.po.Deployment">
      <id column="deployment_id" property="id"></id>
      <result column="spot_id" property="spotId"></result>
      <result column="pname" property="place.project.name"></result>
      <result column="dname" property="device.name"></result>
      <result column="district" property="place.district"></result>
      <result column="building" property="place.building"></result>
      <result column="floor" property="place.floor"></result>
    </association>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, deployment_id, record, date, note
  </sql>
  <select id="selectByLimitAndOffset" resultMap="UsrDepMap">
    SELECT
    m.*,
    usr.name uname,
    dep.dname,
    dep.pname,
    dep.district,
    dep.building,
    dep.floor,
    dep.spot_id
    FROM
    maintenance m,
    user usr,
        (select
        dep.id,
        dev.name dname,
        p.name pname,
        p.district,
        p.building,
        p.floor,
        dep.spot_id
        from
        deployment dep,
        device dev,
            (select
            place.id,
            proj.name,
            place.district,
            place.building,
            place.floor
            from project proj, place
            where proj.id=place.project_id) p
        where p.id=dep.place_id and dev.id=dep.device_id) dep
    where
    usr.id=m.user_id and dep.id=m.deployment_id
    limit #{offset}, #{limit}
  </select>

  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.fireengineering.management.po.MaintenanceExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from maintenance
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from maintenance
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from maintenance
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.fireengineering.management.po.MaintenanceExample" >
    delete from maintenance
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.fireengineering.management.po.Maintenance" >
    insert into maintenance (id, user_id, deployment_id, 
      record, date, note)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, #{deploymentId,jdbcType=VARCHAR}, 
      #{record,jdbcType=VARCHAR}, #{date,jdbcType=DATE}, #{note,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.fireengineering.management.po.Maintenance" >
    insert into maintenance
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="deploymentId != null" >
        deployment_id,
      </if>
      <if test="record != null" >
        record,
      </if>
      <if test="date != null" >
        date,
      </if>
      <if test="note != null" >
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="deploymentId != null" >
        #{deploymentId,jdbcType=VARCHAR},
      </if>
      <if test="record != null" >
        #{record,jdbcType=VARCHAR},
      </if>
      <if test="date != null" >
        #{date,jdbcType=DATE},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fireengineering.management.po.MaintenanceExample" resultType="java.lang.Integer" >
    select count(*) from maintenance
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update maintenance
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.deploymentId != null" >
        deployment_id = #{record.deploymentId,jdbcType=VARCHAR},
      </if>
      <if test="record.record != null" >
        record = #{record.record,jdbcType=VARCHAR},
      </if>
      <if test="record.date != null" >
        date = #{record.date,jdbcType=DATE},
      </if>
      <if test="record.note != null" >
        note = #{record.note,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update maintenance
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=VARCHAR},
      deployment_id = #{record.deploymentId,jdbcType=VARCHAR},
      record = #{record.record,jdbcType=VARCHAR},
      date = #{record.date,jdbcType=DATE},
      note = #{record.note,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fireengineering.management.po.Maintenance" >
    update maintenance
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="deploymentId != null" >
        deployment_id = #{deploymentId,jdbcType=VARCHAR},
      </if>
      <if test="record != null" >
        record = #{record,jdbcType=VARCHAR},
      </if>
      <if test="date != null" >
        date = #{date,jdbcType=DATE},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fireengineering.management.po.Maintenance" >
    update maintenance
    set user_id = #{userId,jdbcType=VARCHAR},
      deployment_id = #{deploymentId,jdbcType=VARCHAR},
      record = #{record,jdbcType=VARCHAR},
      date = #{date,jdbcType=DATE},
      note = #{note,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>